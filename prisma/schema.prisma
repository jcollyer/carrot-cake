generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Reference {
  id                String  @id @default(cuid())
  userId            String?
  title             String
  value             String
  type              String
  publish           Boolean @default(true)
  referenceOwner    User?   @relation(fields: [userId], references: [id])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id                  String   @id @default(cuid())
  userId              String
  expires             DateTime
  sessionToken        String   @unique
  accessToken         String   @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id])
}

model User {
  id                  String      @id @default(cuid())
  name                String?
  email               String?     @unique
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  accounts            Account[]
  references          Reference[]
  sessions            Session[]
  InstagramVideos     InstagramVideos[]
  tiktokVideos        TiktokVideos[]
}

model VerificationToken {
  id                  String   @id @default(cuid())
  identifier          String
  token               String   @unique
  expires             DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([identifier, token])
}

model InstagramVideos {
  id                  String   @id @default(cuid())
  userId              String
  videoUrl            String
  videoCaption        String?
  videoType           String
  scheduledDate       DateTime
  accessToken         String
  InstagramuserId     String
  thumbnail           String
  referenceOwner      User     @relation(fields: [userId], references: [id])
}

model TiktokVideos {
  id                      String   @id @default(cuid())
  userId                  String
  videoUrl                String
  title                   String
  yourBrand               Boolean
  brandedContent          Boolean
  privacyStatus           String
  commercialUseContent    Boolean
  commercialUseOrganic    Boolean
  disableDuet             Boolean
  disableComment          Boolean
  disableStitch           Boolean
  scheduledDate           DateTime
  accessToken             String
  thumbnail               String
  draft                   Boolean
  user                    User     @relation(fields: [userId], references: [id])
}
