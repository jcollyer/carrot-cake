generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Reference {
  id                String  @id @default(cuid())
  userId            String?
  title             String
  value             String
  type              String
  publish           Boolean @default(true)
  referenceOwner    User?   @relation(fields: [userId], references: [id])
}

model Account {
  id                 String @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String      @id @default(cuid())
  name                String?
  email               String?     @unique
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  accounts            Account[]
  references          Reference[]
  sessions            Session[]
  InstagramVideos     InstagramVideos[]
  tiktokVideos        TiktokVideos[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InstagramVideos {
  id                  String   @id @default(cuid())
  userId              String
  videoUrl            String
  videoCaption        String?
  videoType           String
  scheduledDate       DateTime
  accessToken         String
  InstagramuserId     String
  thumbnail           String
  referenceOwner      User     @relation(fields: [userId], references: [id])
}

model TiktokVideos {
  id                      String   @id @default(cuid())
  userId                  String
  videoUrl                String
  title                   String
  yourBrand               Boolean
  brandedContent          Boolean
  privacyStatus           String
  commercialUseContent    Boolean
  commercialUseOrganic    Boolean
  disableDuet             Boolean
  disableComment          Boolean
  disableStitch           Boolean
  scheduledDate           DateTime
  accessToken             String
  thumbnail               String
  draft                   Boolean
  user                    User     @relation(fields: [userId], references: [id])
}
